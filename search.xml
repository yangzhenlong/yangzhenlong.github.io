<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring-data-jpa使用</title>
      <link href="/2020/03/18/java/framework/springdata/spring-data-jpa%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/18/java/framework/springdata/spring-data-jpa%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<pre><code>JPA(Java Persistence API)是一种对象关系映射的ORM框架，springboot-jpa可以用简单的配置来完成一些常规的数据库crud操作</code></pre><p>文档：<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/</a></p><a id="more"></a><h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><p>依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开发工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver <span class="token comment" spellcheck="true"># mysql8推荐使用cj.jdbc， com.mysql.jdbc.Driver不推荐使用了</span>    <span class="token comment" spellcheck="true">#数据库连接池默认使用 tomcat-jdbc</span>    <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>      <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> MYSQL    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update</code></pre><p>实体</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"phone_number"</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String phoneNumber<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>dao</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>rest接口</p><pre><code>@RestController@RequestMapping(&quot;/user&quot;)public class UserResource {    @Autowired    private UserRepository userRepository;    @GetMapping(&quot;&quot;)    public List&lt;User&gt; list(){        return userRepository.findAll();    }    @PostMapping(&quot;&quot;)    public User add(@RequestBody User user){        return userRepository.save(user);    }}</code></pre><p>启动类</p><pre><code>@SpringBootApplicationpublic class MysqlApp {    public static void main(String[] args) {        SpringApplication.run(MysqlApp.class, args);    }}</code></pre><p>启动app后，使用rest工具如postman来测试。</p><pre><code>POST http://localhost:8080/user---request body:{    &quot;name&quot;:&quot;六六六&quot;,    &quot;phoneNumber&quot;:&quot;15500000006&quot;}---response:{    &quot;id&quot;: 0,    &quot;name&quot;: &quot;六六六&quot;,    &quot;phoneNumber&quot;: &quot;15500000006&quot;,    &quot;createTime&quot;: &quot;2018-12-02T01:34:41.382+0000&quot;}</code></pre><pre><code>GET http://localhost:8080/user---[    {        &quot;id&quot;: 1,        &quot;name&quot;: &quot;张三&quot;,        &quot;phoneNumber&quot;: &quot;15500000001&quot;,        &quot;createTime&quot;: &quot;2018-12-01T13:04:53.000+0000&quot;    },    {        &quot;id&quot;: 2,        &quot;name&quot;: &quot;李四&quot;,        &quot;phoneNumber&quot;: &quot;15500000002&quot;,        &quot;createTime&quot;: &quot;2018-12-01T13:04:56.000+0000&quot;    },    {        &quot;id&quot;: 3,        &quot;name&quot;: &quot;王五&quot;,        &quot;phoneNumber&quot;: &quot;15500000003&quot;,        &quot;createTime&quot;: &quot;2018-12-01T13:05:02.000+0000&quot;    },    {        &quot;id&quot;: 5,        &quot;name&quot;: &quot;六六六&quot;,        &quot;phoneNumber&quot;: &quot;15500000006&quot;,        &quot;createTime&quot;: &quot;2018-12-02T01:34:41.000+0000&quot;    }]</code></pre><h1 id="JPA常用查询方法"><a href="#JPA常用查询方法" class="headerlink" title="JPA常用查询方法"></a>JPA常用查询方法</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><table><thead><tr><th>关键字</th><th>举例</th><th>对应JPQL</th></tr></thead><tbody><tr><td></td><td>And</td><td>findByLastnameAndFirstname</td></tr><tr><td></td><td>Or</td><td>findByLastnameOrFirstname</td></tr><tr><td></td><td>Is,Equals</td><td>findByFirstname,findByFirstnameIs,findByFirstnameEquals</td></tr><tr><td></td><td>Between</td><td>findByStartDateBetween</td></tr><tr><td></td><td>LessThan</td><td>findByAgeLessThan</td></tr><tr><td></td><td>LessThanEqual</td><td>findByAgeLessThanEqual</td></tr><tr><td></td><td>GreaterThan</td><td>findByAgeGreaterThan</td></tr><tr><td></td><td>GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td></tr><tr><td></td><td>After</td><td>findByStartDateAfter</td></tr><tr><td></td><td>Before</td><td>findByStartDateBefore</td></tr><tr><td></td><td>IsNull</td><td>findByAgeIsNull</td></tr><tr><td></td><td>IsNotNull,NotNull</td><td>findByAge(Is)NotNull</td></tr><tr><td></td><td>Like</td><td>findByFirstnameLike</td></tr><tr><td></td><td>NotLike</td><td>findByFirstnameNotLike</td></tr><tr><td></td><td>StartingWith</td><td>findByFirstnameStartingWith</td></tr><tr><td></td><td>EndingWith</td><td>findByFirstnameEndingWith</td></tr><tr><td></td><td>Containing</td><td>findByFirstnameContaining</td></tr><tr><td></td><td>OrderBy</td><td>findByAgeOrderByLastnameDesc</td></tr><tr><td></td><td>Not</td><td>findByLastnameNot</td></tr><tr><td></td><td>In</td><td>findByAgeIn(Collection<Age> ages)</td></tr><tr><td></td><td>NotIn</td><td>findByAgeNotIn(Collection<Age> ages)</td></tr><tr><td></td><td>TRUE</td><td>findByActiveTrue()</td></tr><tr><td></td><td>FALSE</td><td>findByActiveFalse()</td></tr><tr><td></td><td>IgnoreCase</td><td>findByFirstnameIgnoreCase</td></tr></tbody></table><h2 id="JPA示例"><a href="#JPA示例" class="headerlink" title="JPA示例"></a>JPA示例</h2><h3 id="表数据"><a href="#表数据" class="headerlink" title="表数据"></a>表数据</h3><table><thead><tr><th>id</th><th>name</th><th>age</th><th>available(是否禁用)</th><th>createTime</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>28</td><td>true</td><td>2018-01-01</td></tr><tr><td>2</td><td>李四</td><td>22</td><td>false</td><td>2018-05-03</td></tr><tr><td>3</td><td>丽丽</td><td>18</td><td>true</td><td>2018-12-30</td></tr></tbody></table><h3 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h3><h4 id="By"><a href="#By" class="headerlink" title="By"></a>By</h4><ul><li>根据name查询</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user where name=?1</span>User <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等同findOneByName</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等同findAllByName</span></code></pre><pre class=" language-java"><code class="language-java">userRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th>1</th><th>张三</th><th>28</th><th>true</th><th>2018-01-01</th></tr></thead></table><hr><h4 id="And"><a href="#And" class="headerlink" title="And"></a>And</h4><ul><li>根据name和age查询</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user where name=?1 and age=?2</span>User <span class="token function">findByNameAndAge</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">userRepository<span class="token punctuation">.</span><span class="token function">findByNameAndAge</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th>1</th><th>张三</th><th>28</th><th>true</th><th>2018-01-01</th></tr></thead></table><hr><h4 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user where name=?1 or age=?2</span>User <span class="token function">findByNameOrAge</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="In"><a href="#In" class="headerlink" title="In"></a>In</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user where name in(?1)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByNameIn</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> nameList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="GreaterThan"><a href="#GreaterThan" class="headerlink" title="GreaterThan"></a>GreaterThan</h4><ul><li>如查询年龄大于20的</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user where age>?2</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByAgeGreaterThan</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">userRepository<span class="token punctuation">.</span><span class="token function">findByAgeGreaterThan</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th>id</th><th>name</th><th>age</th><th>available</th><th>createTime</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>28</td><td>true</td><td>2018-01-01</td></tr><tr><td>2</td><td>李四</td><td>22</td><td>false</td><td>2018-05-03</td></tr></tbody></table><hr><h4 id="Boolean查询"><a href="#Boolean查询" class="headerlink" title="Boolean查询"></a>Boolean查询</h4><ul><li>如查询禁用的用户</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user where available = 0</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByAvailableFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">userRepository<span class="token punctuation">.</span><span class="token function">findByAvailableFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th>2</th><th>李四</th><th>22</th><th>false</th><th>2018-05-03</th></tr></thead></table><hr><h4 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h4><ul><li>如按时间段查询</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user where createtime between ?1 and ?2</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByCreateTimeBetween</span><span class="token punctuation">(</span>Date start<span class="token punctuation">,</span> Date end<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">userRepository<span class="token punctuation">.</span><span class="token function">findByCreateTimeBetween</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2018-05-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token string">"2019-05-01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里new Date("2018-05-01")是举例，实际中自己格式化为java.util.Date类型即可</span></code></pre><table><thead><tr><th>id</th><th>name</th><th>age</th><th>available</th><th>createTime</th></tr></thead><tbody><tr><td>2</td><td>李四</td><td>22</td><td>false</td><td>2018-05-03</td></tr><tr><td>3</td><td>丽丽</td><td>18</td><td>true</td><td>2018-12-30</td></tr></tbody></table><hr><h4 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h4><ul><li>查询前top页的数据</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select * from user limit 10</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findTop10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select * from user where available = 1 limit 10</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findTop10ByAvailableIsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="count-统计"><a href="#count-统计" class="headerlink" title="count 统计"></a>count 统计</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//select count(1) where age=?1</span><span class="token keyword">long</span> <span class="token function">countByAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h2 id="原生SQL查询-Query"><a href="#原生SQL查询-Query" class="headerlink" title="原生SQL查询 @Query"></a>原生SQL查询 <a href="https://my.oschina.net/u/196373" target="_blank" rel="noopener">@Query</a></h2><p>JPA也支持原生sql查询，使用<code>@Query</code>注解使用，如：</p><p>UserRepository:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//原生sql查询</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"select * from user where name=?1 and age > ?2"</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryBySQL</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sql"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">sql</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">queryBySQL</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>测试：</p><pre><code>GET http://localhost:8080/user/sql?name=张三&amp;age=10</code></pre><p><img src="https://oscimg.oschina.net/oscnet/fde32fd37d856860612bb42ff2e320b0839.jpg" alt=""></p><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://gitee.com/yimingkeji/springboot/tree/master/jpa" target="_blank" rel="noopener">https://gitee.com/yimingkeji/springboot/tree/master/jpa</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> framework </category>
          
          <category> springdata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jpa </tag>
            
            <tag> spring-data-jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot跨域配置CORS</title>
      <link href="/2020/03/18/java/framework/springboot/springboot%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AECORS/"/>
      <url>/2020/03/18/java/framework/springboot/springboot%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AECORS/</url>
      
        <content type="html"><![CDATA[<h1 id="CORS理解"><a href="#CORS理解" class="headerlink" title="CORS理解"></a>CORS理解</h1><pre><code>CORS(Cross-Origin Resource Sharing) 跨域资源共享浏览器在访问当前域名下的资源时，能直接传输数据。但是出于安全考虑，浏览器在访问非当前域名的资源时会遇到跨域访问限制这时候我们需要一种机制：跨域资源共享（cors）</code></pre><a id="more"></a><h1 id="cors的请求类型"><a href="#cors的请求类型" class="headerlink" title="cors的请求类型"></a>cors的请求类型</h1><p>来自 <a href="https://www.cnblogs.com/loveis715/p/4592246.html" target="_blank" rel="noopener">CORS简介(作者 loveis715)</a></p><h2 id="简单请求-Simple-Request"><a href="#简单请求-Simple-Request" class="headerlink" title="简单请求(Simple Request)"></a>简单请求(Simple Request)</h2><pre><code>如果一个请求没有包含任何自定义请求头，而且它所使用HTTP动词是GET，HEAD或POST之一，那么它就是一个Simple Request。但是在使用POST作为请求的动词时，该请求的Content-Type需要是application/x-www-form-urlencoded，multipart/form-data或text/plain之一。</code></pre><h2 id="预检请求-Preflighted-Request"><a href="#预检请求-Preflighted-Request" class="headerlink" title="预检请求(Preflighted Request)"></a>预检请求(Preflighted Request)</h2><pre><code>如果一个请求包含了任何自定义请求头，或者它所使用的HTTP动词是GET，HEAD或POST之外的任何一个动词，那么它就是一个Preflighted Request。如果POST请求的Content-Type并不是application/x-www-form-urlencoded，multipart/form-data或text/plain之一，那么其也是Preflighted Request。</code></pre><h2 id="带凭证的请求-Requests-with-Credential"><a href="#带凭证的请求-Requests-with-Credential" class="headerlink" title="带凭证的请求(Requests with Credential)"></a>带凭证的请求(Requests with Credential)</h2><pre><code>一般情况下，一个跨域请求不会包含当前页面的用户凭证。一旦一个跨域请求包含了当前页面的用户凭证，那么其就属于Requests with Credential。</code></pre><h1 id="springboot的cors支持"><a href="#springboot的cors支持" class="headerlink" title="springboot的cors支持"></a>springboot的cors支持</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><pre><code>springboot提供api服务(端口8080)，前端通过jquery发送http请求(端口63342)，由于端口不同，会造成跨域访问</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>springboot接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/cors/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"cors test get method"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/api/cors/post"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"cors test post method"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>前端代码：cors.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>cors跨域测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/2.1.0/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">function</span> <span class="token function">crosGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>                url<span class="token punctuation">:</span><span class="token string">'http://localhost:8080/api/cors/get'</span><span class="token punctuation">,</span>                dateType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#getRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求成功。'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败：'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#getRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求失败！！！'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">crosPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>                url<span class="token punctuation">:</span><span class="token string">'http://localhost:8080/api/cors/post'</span><span class="token punctuation">,</span>                dateType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求成功。'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求失败！！！'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>crosGet()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>get跨域测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getRes<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#ccc</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>crosPost()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>post跨域测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postRes<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#ccc</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>前端代码cors.html可以放到tomcat或者nginx中，这里直接使用idea的<code>open in Browser</code>打开，默认端口为63342</p><p><img src="https://oscimg.oschina.net/oscnet/988641f47a40ddf276446d797d2c40c2dd9.jpg" alt=""></p><p><img src="https://oscimg.oschina.net/oscnet/bafd0e862fc1795ed5e5deb0e9e8fb12654.jpg" alt=""></p><h2 id="不允许非当前域名访问错误"><a href="#不允许非当前域名访问错误" class="headerlink" title="不允许非当前域名访问错误"></a>不允许非当前域名访问错误</h2><p>启动sprinboot后，点击前端按钮测试，会返回错误：</p><pre><code>Access to XMLHttpRequest at &#39;http://localhost:8080/api/cors/get&#39; from origin &#39;http://localhost:63342&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.当前域名：http://localhost:63342要访问的域名：http://localhost:8080错误原因：发生了跨域访问，服务端(8080)未允许该域名(63342)进行访问</code></pre><p><img src="https://oscimg.oschina.net/oscnet/f95f0f00c16568a5194ff7c38652d0df181.jpg" alt=""></p><h2 id="添加cors支持，允许域名访问"><a href="#添加cors支持，允许域名访问" class="headerlink" title="添加cors支持，允许域名访问"></a>添加cors支持，允许域名访问</h2><p>springboot中，添加cors支持的配置：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> WebMvcConfigurer <span class="token function">corsConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"http://localhost:63342"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//允许域名访问，如果*，代表所有域名</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次测试，成功</p><p><img src="https://oscimg.oschina.net/oscnet/5284efa43ef7493dab37b16f68dfd1c76b9.jpg" alt=""></p><h2 id="header跨域限制"><a href="#header跨域限制" class="headerlink" title="header跨域限制"></a>header跨域限制</h2><p>修改配置，只允许header中带<code>Authorization</code>或者<code>Token</code>的请求访问</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> WebMvcConfigurer <span class="token function">corsConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"Token"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//允许的头信息</span>                        <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"http://localhost:63342"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改html中，post接口header带<code>Authorization</code>，get接口header带<code>aaa</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">crosGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>                url<span class="token punctuation">:</span><span class="token string">'http://localhost:8080/api/cors/get'</span><span class="token punctuation">,</span>                dateType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                headers<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'aaa'</span><span class="token punctuation">:</span><span class="token string">'Basic 123456'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#getRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求成功。'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败：'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#getRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求失败！！！'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">crosPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>                url<span class="token punctuation">:</span><span class="token string">'http://localhost:8080/api/cors/post'</span><span class="token punctuation">,</span>                dateType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//headers:{'Authorization':'Basic 123456'},//带头信息方式1</span>                beforeSend<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">,</span><span class="token string">'Basic 123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//带头信息方式2</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求成功。'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败：'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postRes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'请求失败！！！'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>测试，get访问失败，post成功</p><p><img src="https://oscimg.oschina.net/oscnet/552917def94853a52d176c030d196fa9f62.jpg" alt=""></p><h2 id="请求方式限制"><a href="#请求方式限制" class="headerlink" title="请求方式限制"></a>请求方式限制</h2><p>修改配置，只支持post方式访问：</p><pre><code>@Configurationpublic class CorsConfig {    @Bean    public WebMvcConfigurer corsConfigurer() {        return new WebMvcConfigurer() {            @Override            public void addCorsMappings(CorsRegistry registry) {                registry.addMapping(&quot;/api/**&quot;)                        .allowedHeaders(&quot;Authorization&quot;, &quot;Token&quot;)                        .allowedMethods(&quot;POST&quot;)//只允许post方式                        .allowedOrigins(&quot;http://localhost:63342&quot;);            }        };    }}</code></pre><p>测试，get访问失败，post成功</p><p><img src="https://oscimg.oschina.net/oscnet/9de4efa775308bbbc47e9a8012b94981189.jpg" alt=""></p><p>配置get和post都允许，则都访问成功</p><pre class=" language-java"><code class="language-java">egistry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span></code></pre><p><img src="https://oscimg.oschina.net/oscnet/172f362b52fc5280a637513330cdfa28478.jpg" alt=""></p><h1 id="局部跨域设置"><a href="#局部跨域设置" class="headerlink" title="局部跨域设置"></a>局部跨域设置</h1><p>上面是配置了全局的跨域访问，也可以配置局部访问控制</p><p>类上面注解@CrossOrigin</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">"http://domain.com"</span><span class="token punctuation">,</span> allowedHeaders <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">{</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestResource</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>方法上面的@CrossOrigin</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestResource</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">"http://domain.com"</span><span class="token punctuation">,</span> allowedHeaders <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"header1"</span><span class="token punctuation">,</span> <span class="token string">"header2"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="CORS参考文档"><a href="#CORS参考文档" class="headerlink" title="CORS参考文档"></a>CORS参考文档</h1><p><a href="https://www.cnblogs.com/loveis715/p/4592246.html" target="_blank" rel="noopener">CORS简介(作者 loveis715)</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">moz技术文档 HTTP访问控制(CORS)</a></p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-cors" target="_blank" rel="noopener">springboot官方文档</a></p><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://gitee.com/yimingkeji/springboot/tree/master/cors" target="_blank" rel="noopener">https://gitee.com/yimingkeji/springboot/tree/master/cors</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> framework </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springboot 跨域 </tag>
            
            <tag> springboot cors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot日志配置logback</title>
      <link href="/2020/03/18/java/framework/springboot/springboot%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AElogback/"/>
      <url>/2020/03/18/java/framework/springboot/springboot%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AElogback/</url>
      
        <content type="html"><![CDATA[<h1 id="最简单的日志配置"><a href="#最简单的日志配置" class="headerlink" title="最简单的日志配置"></a>最简单的日志配置</h1><p>在application.yml中添加debug模式日志：</p><pre><code>debug: true</code></pre><p>启动项目后发现会打印很多日志。springboot默认是debug=false</p><a id="more"></a><p>默认日志配置是在<code>org.springframework.boot.context.logging.LoggingApplicationListener</code>类中的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">{</span>        MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> loggers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"web"</span><span class="token punctuation">,</span> <span class="token string">"org.springframework.core.codec"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"web"</span><span class="token punctuation">,</span> <span class="token string">"org.springframework.http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"web"</span><span class="token punctuation">,</span> <span class="token string">"org.springframework.web"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sql"</span><span class="token punctuation">,</span> <span class="token string">"org.springframework.jdbc.core"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sql"</span><span class="token punctuation">,</span> <span class="token string">"org.hibernate.SQL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DEFAULT_GROUP_LOGGERS <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>loggers<span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token string">"sql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token string">"web"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token string">"org.springframework.boot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>TRACE<span class="token punctuation">,</span> <span class="token string">"org.springframework"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>TRACE<span class="token punctuation">,</span> <span class="token string">"org.apache.tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>TRACE<span class="token punctuation">,</span> <span class="token string">"org.apache.catalina"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>TRACE<span class="token punctuation">,</span> <span class="token string">"org.eclipse.jetty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loggers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>TRACE<span class="token punctuation">,</span> <span class="token string">"org.hibernate.tool.hbm2ddl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOG_LEVEL_LOGGERS <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>loggers<span class="token punctuation">)</span><span class="token punctuation">;</span>        EVENT_TYPES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>ApplicationStartingEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ApplicationEnvironmentPreparedEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ApplicationPreparedEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ContextClosedEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ApplicationFailedEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        SOURCE_TYPES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>SpringApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        shutdownHookRegistered <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="使用logback配置日志"><a href="#使用logback配置日志" class="headerlink" title="使用logback配置日志"></a>使用logback配置日志</h1><p>在<code>src/main/resources</code>下新建文件 <code>/logs/logback.xml</code>，内容(控制台带颜色渲染)：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60 seconds<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--日志文件的存储地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.home}/logs/springboot/log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到控制台 名字随便写--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>withJansi</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>withJansi</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--&lt;pattern>%d %p (%file:%line\)- %m%n&lt;/pattern>--></span>            <span class="token comment" spellcheck="true">&lt;!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>--------------> %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/main.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--按没分钟保存日志 修改格式可以按小时、按天、月来保存--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/main.log%d{yyyy-MM-dd HH:mm}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>1GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>--------------> %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>application.yml中添加日志配置：</p><pre><code>logging:  config: classpath:log/logback.xml</code></pre><p>写一个测试接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>LogApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"访问了主页接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动项目后，访问 localhost:8080 ,查看控制台和文件</p><p><img src="https://oscimg.oschina.net/oscnet/0b16734c8447087c016ad374b95bc8e2bee.jpg" alt=""></p><p><img src="https://oscimg.oschina.net/oscnet/685621c6d5490f50f7b0bf1d45ca1f3772b.jpg" alt=""></p><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://gitee.com/yimingkeji/springboot/tree/master/log" target="_blank" rel="noopener">https://gitee.com/yimingkeji/springboot/tree/master/log</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> framework </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springboot 日志 </tag>
            
            <tag> springboot logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot多环境配置profile</title>
      <link href="/2020/03/18/java/framework/springboot/springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEprofile/"/>
      <url>/2020/03/18/java/framework/springboot/springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEprofile/</url>
      
        <content type="html"><![CDATA[<p>我们在开发中和上线后的一些配置参数不同，如：数据库连接</p><p>springboot为我们提供了区分环境配置的方法</p><a id="more"></a><h1 id="同一个配置文件不同环境配置"><a href="#同一个配置文件不同环境配置" class="headerlink" title="同一个配置文件不同环境配置"></a>同一个配置文件不同环境配置</h1><p>同一个配置文件<code>application.yml</code>中可以使用<code>---</code>3个杠来区分环境</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true">#默认启动的环境</span><span class="token comment" spellcheck="true"># 开发环境配置</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token key atrule">myconf</span><span class="token punctuation">:</span>  <span class="token key atrule">user</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 开发<span class="token punctuation">-</span>哈哈<span class="token comment" spellcheck="true"># 生产环境配置</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod<span class="token key atrule">myconf</span><span class="token punctuation">:</span>  <span class="token key atrule">user</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 生产<span class="token punctuation">-</span>嘿嘿嘿</code></pre><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfileApp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${myconf.user.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProfileApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动项目后，查看日志：</p><pre><code>2018-11-23 16:59:53.131  INFO 90732 --- [  restartedMain] com.yimingkeji.profile.ProfileApp        : The following profiles are active: dev #当前的profile是dev</code></pre><p>访问 <a href="http://localhost:8080/name" target="_blank" rel="noopener">http://localhost:8080/name</a></p><pre><code>开发-哈哈</code></pre><p>如果修改启动环境为 prod</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod</code></pre><p>启动后再次访问 <a href="http://localhost:8080/name" target="_blank" rel="noopener">http://localhost:8080/name</a></p><pre><code>生产-嘿嘿嘿</code></pre><h1 id="不同配置文件不同环境"><a href="#不同配置文件不同环境" class="headerlink" title="不同配置文件不同环境"></a>不同配置文件不同环境</h1><p>还可以添加配置文件，以<code>application-环境</code>来命名，如</p><pre><code>application.yml #默认配置application-dev.yml # 开发环境配置application-prod.yml # 生产环境配置</code></pre><p>application.yml</p><pre><code>server:  port: 8080spring:  profiles:    active: dev #默认启动的环境</code></pre><p>application-dev.yml</p><pre><code>myconf:  user:    address: 杭州市西湖区</code></pre><p>application-prod.yml</p><pre><code>myconf:  user:    address: 北京北京</code></pre><p>接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${myconf.user.address}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String address<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/address"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> address<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>先设置启动环境为dev，启动后访问 <a href="http://localhost:8080/address" target="_blank" rel="noopener">http://localhost:8080/address</a></p><pre><code>杭州市西湖区</code></pre><p>设置环境为prod</p><pre><code>北京北京</code></pre><p>当然，这2种方式可以配合使用。在<code>application.yml</code>中保留之前的配置：</p><pre><code># 开发环境配置---spring:  profiles: devmyconf:  user:    name: 开发-哈哈# 生产环境配置---spring:  profiles: prodmyconf:  user:    name: 生产-嘿嘿嘿</code></pre><p>修改接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${myconf.user.name}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${myconf.user.address}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String address<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"姓名："</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">", 地址："</span> <span class="token operator">+</span> address<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>环境dev，访问 <a href="http://localhost:8080/user" target="_blank" rel="noopener">http://localhost:8080/user</a></p><pre><code>姓名：开发-哈哈, 地址：杭州市西湖区</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> framework </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot profile </tag>
            
            <tag> springboot 多环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot配置(自定义配置|List配置|Map配置|读取配置)</title>
      <link href="/2020/03/18/java/framework/springboot/springboot%E9%85%8D%E7%BD%AE-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE-List%E9%85%8D%E7%BD%AE-Map%E9%85%8D%E7%BD%AE-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/18/java/framework/springboot/springboot%E9%85%8D%E7%BD%AE-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE-List%E9%85%8D%E7%BD%AE-Map%E9%85%8D%E7%BD%AE-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h1><p>springboot的默认配置都封装 <code>spring-boot-autoconfigure-xx版本.jar/META-INF/additional-spring-configuration-metadata.json</code>文件中</p><p><img src="https://oscimg.oschina.net/oscnet/20d93e61fb7aee75423cf1fa2a798e6c999.jpg" alt=""></p><p>打开这个文件，比如搜索端口配置 <code>server.port</code>，看到默认为8080</p><a id="more"></a><p><img src="https://oscimg.oschina.net/oscnet/a882560163e802104c8427287db7bbb52fa.jpg" alt=""></p><p>springboot常用的配置文件有 yaml和properties格式</p><p>在springboot项目<code>src/main/resources</code>目录新建<code>application.yml</code>文件，添加内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre><p>启动项目后，端口变为8081，打印日志：</p><pre><code>Tomcat started on port(s): 8081 (http) with context path &#39;&#39;</code></pre><h1 id="读取配置的3种方式"><a href="#读取配置的3种方式" class="headerlink" title="读取配置的3种方式"></a>读取配置的3种方式</h1><p>在配置中添加自定义配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">myconfig</span><span class="token punctuation">:</span>  <span class="token key atrule">user</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 哈哈哈    <span class="token key atrule">sex</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>下面通过3中方式来读取配置的值</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a><a href="https://my.oschina.net/u/3193899" target="_blank" rel="noopener">@Value</a></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//@Value("myconfig.user.name")//结果：name=myconfig.user.name 不会从配置取值，相当于直接赋值</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${myconfig.user.name}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结果 配置中的姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${myconfig.user.sex}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${myconfig.user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 测试接口</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    String <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"@Value形式获取配置参数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"name=%s, sex=%s, age=%s \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果:</p><pre><code>@Value形式获取配置参数：name=哈哈哈, sex=1, age=20 </code></pre><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>也可以自己新建一个配置类，只需要说明配置的前缀<code>@ConfigurationProperties(prefix = &quot;前缀名&quot;)</code>，会自动匹配类字段。<br>如前面的user配置：</p><pre><code>import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Configuration;@Configuration@ConfigurationProperties(prefix = &quot;myconfig.user&quot;)//前缀@Datapublic class User {    private String name;//自动匹配name    private int sex;//自动匹配sex    private int age;//自动匹配age}</code></pre><p>测试：</p><pre><code>@AutowiredUser user;@GetMapping(&quot;/user&quot;)    String user() {        StringBuilder sb = new StringBuilder();        sb.append(&quot;\n\n---------------------------------------\n\n&quot;);        sb.append(&quot;从配置类中获取配置：\n&quot;);        sb.append(user);        return sb.toString();    }</code></pre><p>结果：</p><pre><code>---------------------------------------从配置类中获取配置：User(name=哈哈哈, sex=1, age=20)</code></pre><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>从环境信息中读取配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>Environment env<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    String <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"从Environment中获取配置：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"myconfig.user.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意 这里不加${}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>结果：</p><pre><code>从Environment中获取配置：哈哈哈</code></pre><h1 id="配置集合-array、list、map"><a href="#配置集合-array、list、map" class="headerlink" title="配置集合 array、list、map"></a>配置集合 array、list、map</h1><h2 id="配置数组"><a href="#配置数组" class="headerlink" title="配置数组"></a>配置数组</h2><p>yml格式：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">myconfig</span><span class="token punctuation">:</span>    <span class="token key atrule">arr</span><span class="token punctuation">:</span> arr<span class="token punctuation">,</span> arrarr <span class="token comment" spellcheck="true">#数组</span>    <span class="token key atrule">list</span><span class="token punctuation">:</span> list11<span class="token punctuation">,</span>listlist <span class="token comment" spellcheck="true">#集合</span></code></pre><p>properties格式</p><pre><code>myconfig.arr[0]=arrmyconfig.arr[1]=arrarr</code></pre><p>获取数组</p><pre><code>@Value(&quot;${myconfig.arr}&quot;)    private String[] arr;    @Value(&quot;${myconfig.list}&quot;)    private List&lt;String&gt; list;@GetMapping(&quot;/coll&quot;)    public String getArr(){        return &quot;arr:=&quot; + arr[0] + &quot;,&quot;+arr[1] + &quot;\nlist=&quot;+ list;    }</code></pre><p>测试结果：</p><pre><code>arr=arr,arrarrlist=[list11, listlist]</code></pre><h2 id="配置map"><a href="#配置map" class="headerlink" title="配置map"></a>配置map</h2><h3 id="使用-Value获取map的坑"><a href="#使用-Value获取map的坑" class="headerlink" title="使用@Value获取map的坑"></a>使用@Value获取map的坑</h3><p>如果直接使用<a href="https://my.oschina.net/u/3193899" target="_blank" rel="noopener">@Value</a>，启动会报错</p><p>yml:</p><pre><code>myconfig:  map:    k1: v1    k2: v2</code></pre><p>java代码：</p><pre><code>@Value(&quot;${myconfig.map}&quot;)private Map map;</code></pre><p>报错信息：</p><pre><code>Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder &#39;myconfig.map&#39; in value &quot;${myconfig.map}&quot;</code></pre><p>最后找了半天资料，发现需要听过配置类来解决</p><h3 id="使用配置类获取map的值"><a href="#使用配置类获取map的值" class="headerlink" title="使用配置类获取map的值"></a>使用配置类获取map的值</h3><pre><code>@Configuration@ConfigurationProperties(prefix = &quot;myconfig&quot;)public class MyConfig {    @Getter @Setter//必须添加getter、setter    private Map map;}----//读取配置@Autowired private MyConfig myConfig;    @GetMapping(&quot;/coll&quot;)    public Map getArr(){        return  myConfig.getMap();    }</code></pre><p>结果：</p><pre><code>{k1=v1, k2=v2}</code></pre><h1 id="随机数配置"><a href="#随机数配置" class="headerlink" title="随机数配置"></a>随机数配置</h1><pre><code>myconfig:  rand:    str: ${random.value}    num: ${random.int}    num1: ${random.long}    num2: ${random.int(10,99)}    uuid: ${random.uuid}</code></pre><p>演示结果：</p><pre><code>随机数:random.value：b02d121044d9130ea9024bc6853cf0aa random.int：98141319 random.long：8353065529278943330 random.int(10,99)：27 random.uuid：2cd9d432-3210-48ea-bedc-cbe6fac3ecb4 </code></pre><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://gitee.com/yimingkeji/springboot.git" target="_blank" rel="noopener">https://gitee.com/yimingkeji/springboot.git</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> framework </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springboot配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot三种启动方式(main方法启动|jar包启动|mvn启动)</title>
      <link href="/2020/03/18/java/framework/springboot/springboot%E4%B8%89%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F-main%E6%96%B9%E6%B3%95%E5%90%AF%E5%8A%A8-jar%E5%8C%85%E5%90%AF%E5%8A%A8-mvn%E5%90%AF%E5%8A%A8/"/>
      <url>/2020/03/18/java/framework/springboot/springboot%E4%B8%89%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F-main%E6%96%B9%E6%B3%95%E5%90%AF%E5%8A%A8-jar%E5%8C%85%E5%90%AF%E5%8A%A8-mvn%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://my.oschina.net/yimingkeji/blog/2885473" target="_blank" rel="noopener">原文链接</a></p><ul><li>原文也是笔者所写，从 oschain 迁移至此处</li></ul><blockquote><p>springboot 版本：2.1.0.RELEASE</p></blockquote><h1 id="springboot官方文档"><a href="#springboot官方文档" class="headerlink" title="springboot官方文档"></a>springboot官方文档</h1><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#_working_with_spring_boot" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#_working_with_spring_boot</a></p><a id="more"></a><h1 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h1><p>spring-boot-starter-parent</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>myproject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Additional lines to be added here... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>web依赖</p><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h1 id="启动类和接口"><a href="#启动类和接口" class="headerlink" title="启动类和接口"></a>启动类和接口</h1><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldApp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    String <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="注解解释"><a href="#注解解释" class="headerlink" title="注解解释"></a>注解解释</h2><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>@RestController = <a href="https://my.oschina.net/u/1774615" target="_blank" rel="noopener">@Controller</a> + @ResponseBody</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Controller</span> <span class="token comment" spellcheck="true">//springmvc的注解</span><span class="token annotation punctuation">@ResponseBody</span> <span class="token comment" spellcheck="true">//springmvc的注解</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>官方文档解释</p><pre><code>The @RestController and @RequestMapping annotations are Spring MVC annotations. (They are not specific to Spring Boot.)解释： @RestController 和 @RequestMapping 是springmvc的注解，没什么特殊性</code></pre><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><pre><code>This annotation tells Spring Boot to “guess” how you want to configure Spring, based on the jar dependencies that you have added. Since spring-boot-starter-web added Tomcat and Spring MVC, the auto-configuration assumes that you are developing a web application and sets up Spring accordingly.@EnableAutoConfiguration 猜测地给开发者配置好有关springmvc、tomcat、spring方面的配置。也就是会自动配置好springmvc、tomcat、spring的一些配置</code></pre><h1 id="启动服务和访问接口"><a href="#启动服务和访问接口" class="headerlink" title="启动服务和访问接口"></a>启动服务和访问接口</h1><p>启动main方法，控制台打印：</p><pre><code>  .   ____          _            __ _ _ /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &#39;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.1.0.RELEASE)2018-11-21 15:03:33.622  INFO 75693 --- [           main] com.yimingkeji.helloworld.HelloWorldApp  : Starting HelloWorldApp on yangzhenlongdeMacBook-Pro.local with PID 75693 (/Users/yangzhenlong/projs/my/yimingkeji/springboot/helloword/target/classes started by yangzhenlong in /Users/yangzhenlong/projs/my/yimingkeji/springboot)2018-11-21 15:03:33.626  INFO 75693 --- [           main] com.yimingkeji.helloworld.HelloWorldApp  : No active profile set, falling back to default profiles: default2018-11-21 15:03:34.499  INFO 75693 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)2018-11-21 15:03:34.516  INFO 75693 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]2018-11-21 15:03:34.516  INFO 75693 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/9.0.122018-11-21 15:03:34.522  INFO 75693 --- [           main] o.a.catalina.core.AprLifecycleListener   : The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/Users/yangzhenlong/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.]2018-11-21 15:03:34.581  INFO 75693 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext2018-11-21 15:03:34.582  INFO 75693 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 917 ms2018-11-21 15:03:34.604  INFO 75693 --- [           main] o.s.b.w.servlet.ServletRegistrationBean  : Servlet dispatcherServlet mapped to [/]2018-11-21 15:03:34.607  INFO 75693 --- [           main] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;characterEncodingFilter&#39; to: [/*]2018-11-21 15:03:34.608  INFO 75693 --- [           main] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;hiddenHttpMethodFilter&#39; to: [/*]2018-11-21 15:03:34.608  INFO 75693 --- [           main] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;formContentFilter&#39; to: [/*]2018-11-21 15:03:34.608  INFO 75693 --- [           main] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;requestContextFilter&#39; to: [/*]2018-11-21 15:03:34.763  INFO 75693 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;2018-11-21 15:03:34.933  INFO 75693 --- [           main]o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;2018-11-21 15:03:34.936  INFO 75693 --- [           main] com.yimingkeji.helloworld.HelloWorldApp  : Started HelloWorldApp in 1.727 seconds (JVM running for 2.849)</code></pre><p>日志中看到 项目启动端口(prot)为8080，启动根路径(path)为’ ‘</p><p>浏览器或者http客户端（如postman）访问 localhost:8080 </p><pre><code>Hello World!</code></pre><h1 id="使用jar包启动"><a href="#使用jar包启动" class="headerlink" title="使用jar包启动"></a>使用jar包启动</h1><p>在pom.xml依赖中添加spring-boot-maven-plugin插件</p><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p>在终端shell或者Terminal中执行命令：</p><pre><code>$ mvn package</code></pre><p>在项目target目录下会生成jar包：<br><img src="https://oscimg.oschina.net/oscnet/d2b6f6876787b5029376702ce7f4bd18de1.jpg" alt=""></p><p>启动jar包</p><pre><code>$ java -jar target/helloword-1.0.0-SNAPSHOT.jar 2018-11-21 15:12:35.077  INFO 75841 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;2018-11-21 15:12:35.355  INFO 75841 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;2018-11-21 15:12:35.359  INFO 75841 --- [           main] com.yimingkeji.helloworld.HelloWorldApp  : Started HelloWorldApp in 2.382 seconds (JVM running for 2.838)</code></pre><p>访问 localhost:8080</p><pre><code>Hello World!</code></pre><p>按 Ctrl + C 结束服务。</p><h1 id="使用mvn启动"><a href="#使用mvn启动" class="headerlink" title="使用mvn启动"></a>使用mvn启动</h1><pre><code>$ mvn spring-boot:run</code></pre><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://gitee.com/yimingkeji/springboot" target="_blank" rel="noopener">https://gitee.com/yimingkeji/springboot</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> framework </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springboot启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot学习资料整理</title>
      <link href="/2020/03/18/java/framework/springboot/springboot%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/18/java/framework/springboot/springboot%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>springboot在线资料整理</p></blockquote><a id="more"></a><table><thead><tr><th>标题</th><th>链接</th></tr></thead><tbody><tr><td>springboot官网</td><td><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></td></tr><tr><td>springboot官方文档</td><td><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/</a></td></tr><tr><td>springboot官方示例</td><td><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></td></tr><tr><td>Spring Boot参考指南</td><td><a href="https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/content/" target="_blank" rel="noopener">https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/content/</a></td></tr><tr><td>简书</td><td><a href="https://www.jianshu.com/c/f0cf6eae1754" target="_blank" rel="noopener">https://www.jianshu.com/c/f0cf6eae1754</a></td></tr><tr><td>易百教程</td><td><a href="https://www.yiibai.com/spring-boot/" target="_blank" rel="noopener">https://www.yiibai.com/spring-boot/</a></td></tr><tr><td>spring4all</td><td><a href="http://www.spring4all.com/article/246" target="_blank" rel="noopener">http://www.spring4all.com/article/246</a></td></tr><tr><td>程序员DD</td><td><a href="http://blog.didispace.com/categories/Spring-Boot/" target="_blank" rel="noopener">http://blog.didispace.com/categories/Spring-Boot/</a></td></tr><tr><td>纯洁的微笑</td><td><a href="http://www.ityouknow.com/spring-boot.html" target="_blank" rel="noopener">http://www.ityouknow.com/spring-boot.html</a></td></tr><tr><td>泥瓦匠</td><td><a href="https://www.bysocket.com/?page_id=1639" target="_blank" rel="noopener">https://www.bysocket.com/?page_id=1639</a></td></tr><tr><td>liaokailin的专栏</td><td><a href="https://blog.csdn.net/liaokailin/article/category/5765237" target="_blank" rel="noopener">https://blog.csdn.net/liaokailin/article/category/5765237</a></td></tr><tr><td>segmentfault</td><td><a href="https://segmentfault.com/blog/spring_boot" target="_blank" rel="noopener">https://segmentfault.com/blog/spring_boot</a></td></tr><tr><td>嘟嘟独立博客</td><td><a href="http://tengj.top/categories/Spring-Boot%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/" target="_blank" rel="noopener">http://tengj.top/categories/Spring-Boot%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/</a></td></tr><tr><td>Spring Boot Tutorials</td><td><a href="http://www.mkyong.com/tutorials/spring-boot-tutorials/" target="_blank" rel="noopener">http://www.mkyong.com/tutorials/spring-boot-tutorials/</a></td></tr><tr><td>尹吉欢</td><td><a href="http://cxytiandi.com/blog/detail/17437" target="_blank" rel="noopener">http://cxytiandi.com/blog/detail/17437</a></td></tr><tr><td>yimingkeji</td><td><a href="https://my.oschina.net/yimingkeji?q=springboot" target="_blank" rel="noopener">https://my.oschina.net/yimingkeji?q=springboot</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> framework </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通俗易懂理解分布式系统</title>
      <link href="/2020/03/17/idea/%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/03/17/idea/%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直疑惑分布式系统，实际我们无时无刻和分布式打交道，只是没有个通俗的理解</p><p>网上找了些资料，看完觉得明白了很多<del>~</del></p><a id="more"></a><hr><p>著作权归作者所有。<br>商业转载请联系作者获得授权，非商业转载请注明出处。<br>作者：林建入<br>链接：<a href="http://www.zhihu.com/question/22764869/answer/56011081" target="_blank" rel="noopener">http://www.zhihu.com/question/22764869/answer/56011081</a><br>来源：知乎</p><hr><h3 id="一、三个步骤完成华丽转身——任意软件变为“分布式”"><a href="#一、三个步骤完成华丽转身——任意软件变为“分布式”" class="headerlink" title="一、三个步骤完成华丽转身——任意软件变为“分布式”"></a>一、三个步骤完成华丽转身——任意软件变为“分布式”</h3><p>分布式——一个高大上的名词，是计算机软件设计中人民群众喜闻乐见的“逼格满满”、“不明觉厉”的几个名词之一。但很可惜，这玩意儿一点也不复杂，甚至有些“简单”。不信？你只要遵循下述步骤即可将任何一个软件拆分为“分布式”的：</p><ul><li>将你的整个软件视为一个系统（不管它有多复杂）</li><li>将整个系统分割为一系列的 Process（进程）， 每个 Process 完成一定的功能</li><li>将这些 Process 分散到不同的机器上。分散后，选择若干种（没错一种可能不够）通信协议把他们连接起来</li></ul><p>蹬蹬蹬蹬～大功告成。哈哈别打我，这真的是很严肃的通用型三步骤大杀器，对付任何软件，是任何软件都可以的。接下来我当然要解释清楚为什么。</p><h3 id="二、跳出误区——分布式不等于并行计算"><a href="#二、跳出误区——分布式不等于并行计算" class="headerlink" title="二、跳出误区——分布式不等于并行计算"></a>二、跳出误区——分布式不等于并行计算</h3><p>人们常常把分布式系统自然而然的和并行计算联系起来。然而这并不正确。实际上，分布式系统并不一定是并行的，举个简单的例子就能理解——</p><p>某软件，功能如下：</p><ul><li>提示用户输入两个数 A 和 B</li><li>在内部，对 A 和 B 执行某数学运算，获得 C</li><li>输出 C</li></ul><p>很简单吧？这三个步骤是无法并行的。它们需要被依次执行。但是这个软件依然可以被改为分布式的，方法就是用前面提到的方法，把步骤 2 的计算过程独立为一个 Process 移动到另外一台计算机上完成。</p><p>如果我们从整个系统流程的观点来看，并没有什么并行。整个过程都是顺序执行的。只不过执行时出现了“跨设备”的现象而已。可见，分布式本身就只如其字面意思所指，指的仅仅是从结构角度的分散而已。</p><p>当然啊，现实世界中，我们更多的时候钟情于分布式，还是因为它与并行之间可以相互配合。例如实现既是分布同时也是并行的系统。</p><p>好了，理解这一点之后就不难解释为什么我会说前文提到的三步骤是万用大法了。接下来我们继续讨论分布式本身。</p><h3 id="三、拆分-连接是分布式系统的本质"><a href="#三、拆分-连接是分布式系统的本质" class="headerlink" title="三、拆分+连接是分布式系统的本质"></a>三、拆分+连接是分布式系统的本质</h3><p>所谓分布式，无非就是”将一个系统拆分成多个子系统并散布到不同设备“的过程而已。</p><p>本质上而言，实现一个分布式系统，最核心的部分无非有两点：</p><ul><li>如何拆分——可以有很多方式，核心依据一是业务需求，二是成本限制。这是实践中构建分布式系统时最主要的设计依据。</li><li>如何连接——光把系统拆开成 Process 还不够，关键是拆开后的 Process 之间还要能通信，因此涉及通信协议设计的问题，需要考虑的因素很多，好消息是这部分其实成熟方案很多</li></ul><h3 id="四、为什么你要使用分布式？"><a href="#四、为什么你要使用分布式？" class="headerlink" title="四、为什么你要使用分布式？"></a>四、为什么你要使用分布式？</h3><p>分布式系统并非灵丹妙药，解决问题的关键还是看你对问题本身的了解。通常我们需要使用分布式的常见理由是：</p><ul><li>为了性能扩展——系统负载高，单台机器无法承载，希望通过使用多台机器来提高系统的负载能力</li><li>为了增强可靠性——软件不是完美的，网络不是完美的，甚至机器本身也不可能是完美的，随时可能会出错，为了避免故障，需要将业务分散开保留一定的冗余度</li></ul><p>在以提供 Service 为主的服务端软件开发过程中常常遇到这些问题。</p><h3 id="五、一些分布式方案能解决你的问题，另一些却不能，要学会的其实是选择"><a href="#五、一些分布式方案能解决你的问题，另一些却不能，要学会的其实是选择" class="headerlink" title="五、一些分布式方案能解决你的问题，另一些却不能，要学会的其实是选择"></a>五、一些分布式方案能解决你的问题，另一些却不能，要学会的其实是选择</h3><p>笼统的讨论分布式没有太大的意义，就如我刚才所谈的，实际上分布式很容易实现。真正难的地方在于如何选择正确的分布方案。</p><p>例如，当你想要建立一个分布式的数据管理系统的时候，你就必须得面对“一致性”问题。如果你对数据一致性要求很高，你就不得不容忍一些缺陷例如规模伸缩困难；而如果你放弃它，你可以轻松伸缩规模，但你必须解决好由此带来的一系列数据不一致导致的问题。（CAP 问题）</p><p>于是你会意识到，有许多种分布方案，为了正确解决你的问题，你需要对每一个方案都进行了解，并评估，选择不同的方案有时候区别不大，有时候却会深刻的影响整个系统中其他部分的工作方式，甚至影响用户界面中用户操作时的流程。这是我们学习分布式系统的重点所在。</p><h3 id="六、分布式学习入门——基础知识要点"><a href="#六、分布式学习入门——基础知识要点" class="headerlink" title="六、分布式学习入门——基础知识要点"></a>六、分布式学习入门——基础知识要点</h3><p>如我前面所讲，分布式入门不难。主要包含如下知识点：</p><ul><li>Process（进程）。在分布式系统中，进程是基本单元</li><li>通信协议。Process 间需要相互配合才能完成工作，因此通信协议是最基本要解决的问题。这部分其实挺复杂，牵涉面光，不过核心还是抓住两方面，一是存在哪些需求，二是各个协议如何满足这些需求</li><li>命名法。两个 Process 要通信，必须相互知道对方的名字，名字可以是数字，也可以是结构化的字符串。例如众所周知域名系统就是一种命名方案，但是方案还有很多，各有特点</li><li>协作。上面都在谈 Process 之间的通信，可是为什么要通信？因为要协作。协作是个复杂的主题，其中最基本最基本的一个问题就是同步问题。而聊同步问题必然要聊“锁”……知识点就这么展开了</li></ul><p>上面几点是最基础的知识。了解了这些其实就算入门了。可是如何进阶呢？那么必然要开始学习下面的问题：</p><ul><li>一致性。数据存储时，最基本的问题。其实也是实际设计系统时常常需要反复考虑的问题</li><li>容错。冗余是容错的基础，但并不是全部，分布式本身为实现容错提供了一些便利，这也是实际设计系统时常常需要考虑的问题</li></ul><p>好了，如果这些你都学的差不多了，那咱们“纸上谈兵”也就告一段落了。接下来进入实战演练。</p><h3 id="七、实战演练？其实你已经开发过分布式系统了"><a href="#七、实战演练？其实你已经开发过分布式系统了" class="headerlink" title="七、实战演练？其实你已经开发过分布式系统了"></a>七、实战演练？其实你已经开发过分布式系统了</h3><p>你有没有开发过简单的增删改查软件？这类软件通常都需要搭配一个独立的数据库管理系统共同完成功能。实际上，只要你开发过这么简单的软件，那么你就已经开发过分布式系统了。</p><blockquote><p>“什么，基于数据库管理系统开发出来的软件就可以算分布式呀？我做了很多这类软件，怎么我从来没听过这种说法？</p></blockquote><p>真的，我没开玩笑。还记得我们前面提到的吗，什么是分布式？不就是一个大系统拆分成多个小系统分散到不同的设备上吗。回想一下，当你写一个简单的增删改查软件时，只要用到数据库管理系统，是不是具有如下特点：</p><ul><li>整个系统中，你写的代码跑在 A 进程里，而数据库管理系统则跑在另外一个进程 B 里</li><li>A 进程与 B 进程通过某种通信协议连接</li><li>既可以使 A 进程与 B 进程运行在同一台机器上，也可以将它们分开运行于不同的机器上，并且系统依然可以照常运行</li></ul><p>你看，这不就是分布式系统的特点吗？</p><blockquote><p>“啊，原来如此，可是我印象里一说分布式的话，应该会讲「集群」啊啥的吧，这么简单的也算？”</p></blockquote><p>关于「集群」的问题我们之后会谈到，它也是分布式系统的一个应用，但谈集群的时候，我们谈的往往是更具体的东西。但咱们看问题，需要抓住本质。别看麻雀小，五脏却俱全。</p><p>不过，你已经熟悉的东西，我们在这里就不再展开了，我们不妨关注其他一些更有趣的话题。</p>]]></content>
      
      
      <categories>
          
          <category> 概念 </category>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通俗易懂 </tag>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加GitTalk评论系统</title>
      <link href="/2020/03/17/tools/Hexo%E6%B7%BB%E5%8A%A0GitTalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/03/17/tools/Hexo%E6%B7%BB%E5%8A%A0GitTalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>静态博客的评论系统 GitTalk</p><h1 id="GitTalk介绍"><a href="#GitTalk介绍" class="headerlink" title="GitTalk介绍"></a>GitTalk介绍</h1><blockquote><p>Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件</p></blockquote><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://gitalk.github.io" target="_blank" rel="noopener">https://gitalk.github.io</a></p><a id="more"></a><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>使用 GitHub 登录</li><li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 （cmd|ctrl + enter）</li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>初次使用的人可能需要理解文档内容后才可入手，所以笔者这里记录下安装过程，适合新手一起参考和学习。</p><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><p>该仓库需要打开<code>Issues</code>功能</p><h2 id="创建GitHub应用"><a href="#创建GitHub应用" class="headerlink" title="创建GitHub应用"></a>创建GitHub应用</h2><p>创建应用后会拿到<code>Client ID</code>和<code>Client secret</code>，这个是作为评论系统的凭证（用户名密码）。</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p><code>GitHub</code> -&gt; <code>头像</code> -&gt; <code>setting</code> -&gt; <code>Developer settings</code> -&gt; <code>New OAuth App</code></p><p>或者点击这个链接直接进入申请入口</p><ul><li><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></li></ul><h3 id="填写应用信息"><a href="#填写应用信息" class="headerlink" title="填写应用信息"></a>填写应用信息</h3><img src='/images/comment/new_gittalk.jpg' width='500px' height='500px' /><p>创建成功后，会生成<code>Client ID</code>和<code>Client secret</code></p><img src='/images/comment/new_gittalk_succ.jpg' width='500px' height='200px' /><h3 id="集成到Hexo系统中"><a href="#集成到Hexo系统中" class="headerlink" title="集成到Hexo系统中"></a>集成到Hexo系统中</h3><p>在主题的<code>_config.yml</code>文件中添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#gitalk settings</span><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 用来做启用判断可以不用</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> <span class="token string">'用户名'</span> <span class="token comment" spellcheck="true"># GitHub repo owner</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token string">'上面创建的仓库名称'</span> <span class="token comment" spellcheck="true"># GitHub repo</span>  <span class="token key atrule">admin</span><span class="token punctuation">:</span> <span class="token string">'用户名'</span> <span class="token comment" spellcheck="true"># GitHub repo owner and collaborators, only these guys can initialize github issues</span>  <span class="token key atrule">clientID</span><span class="token punctuation">:</span> <span class="token string">'应用 clientID'</span> <span class="token comment" spellcheck="true"># Github Application clientID</span>  <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token string">'应用 clientSecret'</span> <span class="token comment" spellcheck="true"># Github Application clientSecret</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token string">'location.pathname'</span> <span class="token comment" spellcheck="true"># 文章id</span></code></pre><p>在主题的<code>/layout/_partial</code>目录下，新建comment.ejs，添加内容：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://unpkg.com/gitalk/dist/gitalk.css"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/md5.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"gitalk-container"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        clientID<span class="token punctuation">:</span> <span class="token string">'&lt;%= theme.gitalk.clientID %>'</span><span class="token punctuation">,</span>        clientSecret<span class="token punctuation">:</span> <span class="token string">'&lt;%= theme.gitalk.clientSecret %>'</span><span class="token punctuation">,</span>        id<span class="token punctuation">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>        repo<span class="token punctuation">:</span> <span class="token string">'&lt;%= theme.gitalk.repo %>'</span><span class="token punctuation">,</span>        owner<span class="token punctuation">:</span> <span class="token string">'&lt;%= theme.gitalk.owner %>'</span><span class="token punctuation">,</span>        admin<span class="token punctuation">:</span> <span class="token string">'&lt;%= theme.gitalk.admin %>'</span><span class="token punctuation">,</span>        id<span class="token punctuation">:</span> <span class="token function">md5</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>上面的<code>id</code>是为了区分每个文章的唯一表示，默认使用<code>location.pathname</code>来做 id，但是如果文件名包含<code>/</code>特殊字符，就会出现解析错误<code>Validation Failed</code><br>这时候需要用其他方法代替产生<code>id</code>，笔者这里使用 md5 算法来产生。</p></blockquote><ul><li><a href="https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js" target="_blank" rel="noopener">下载<code>md5.min.js</code></a>到项目主题的<code>/source/js/</code>目录下</li><li>在<code>comment.ejs</code>文件中引入<code>md5.min.js</code>（也可以直接引用网络地址，为了访问速度，所以下载到本地了）</li><li>使用<code>md5(location.pathname)</code>来产生 id</li></ul><p>在主题的<code>/layout/_partial/post.ejs</code>底部添加内容：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitalk<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'./comments'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>如果操作成功，刷新页面，应该能看到 GitTalk 评论框了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 评论系统 </category>
          
          <category> GitTalk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitTalk </tag>
            
            <tag> 评论系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git自定义命令和配置颜色</title>
      <link href="/2020/03/16/git/Git%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%E5%92%8CLog%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/16/git/Git%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%E5%92%8CLog%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>如果你安装了git，那么经常会用到如下命令：</p><ul><li>git checkout</li><li>git branch</li><li>git log</li><li>……</li></ul><p>这些命令输入起来很长很繁琐，那么懒如本人就会想办法用简短的命令代替之</p><a id="more"></a><ul><li>打开 gitconfig 配置文件</li></ul><pre class=" language-bash"><code class="language-bash">$ vim ~/.gitconfig</code></pre><ul><li>修改如下</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>user<span class="token punctuation">]</span>name <span class="token operator">=</span> <span class="token punctuation">{</span>your name<span class="token punctuation">}</span>emali <span class="token operator">=</span> <span class="token punctuation">{</span>your email<span class="token punctuation">}</span><span class="token punctuation">[</span>color<span class="token punctuation">]</span>ui <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>co <span class="token operator">=</span> checkoutbr <span class="token operator">=</span> branchlg <span class="token operator">=</span> log --color --graph --pretty<span class="token operator">=</span>format:<span class="token string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset'</span> --abbrev-commit</code></pre><p>然后可以用 <code>git co</code> 代替 <code>git checkout</code>，用 <code>git br</code> 代替 <code>git branch</code>，用 <code>git lg</code> 代替 <code>git log</code>，并且 git log 会有好看的颜色显示</p><img src='/images/git/git_lg.jpg' width='600px' height='200px'/>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git alias </tag>
            
            <tag> git颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git怎么删除commit提交logs？</title>
      <link href="/2020/03/16/git/Git%E6%80%8E%E4%B9%88%E5%88%A0%E9%99%A4commit%E6%8F%90%E4%BA%A4log/"/>
      <url>/2020/03/16/git/Git%E6%80%8E%E4%B9%88%E5%88%A0%E9%99%A4commit%E6%8F%90%E4%BA%A4log/</url>
      
        <content type="html"><![CDATA[<p>我们从其他地方拉过来的代码，有以前别人提交过的记录日志</p><img src="/images/git/git_logs.jpg" style="width:400px;height:150px;" align="center"/><p>那我们想要清除这些日志该如何操作？请看下面</p><a id="more"></a><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="创建临时分支"><a href="#创建临时分支" class="headerlink" title="创建临时分支"></a>创建临时分支</h3><p>假设我们现在位于<code>master</code>分支，那么基于<code>master</code>分支创建一个临时分支<code>temp</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> checkout --orphan temp</code></pre><h3 id="添加所有要提交到文件"><a href="#添加所有要提交到文件" class="headerlink" title="添加所有要提交到文件"></a>添加所有要提交到文件</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> add <span class="token keyword">.</span></code></pre><h3 id="添加注释信息"><a href="#添加注释信息" class="headerlink" title="添加注释信息"></a>添加注释信息</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> commit -m <span class="token string">'fix clean commit logs'</span></code></pre><h3 id="删除旧的master分支"><a href="#删除旧的master分支" class="headerlink" title="删除旧的master分支"></a>删除旧的<code>master</code>分支</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> branch -D master</code></pre><h3 id="将当前临时分支更名为master"><a href="#将当前临时分支更名为master" class="headerlink" title="将当前临时分支更名为master"></a>将当前临时分支更名为<code>master</code></h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> branch -m master</code></pre><h3 id="推送代码到远程仓库"><a href="#推送代码到远程仓库" class="headerlink" title="推送代码到远程仓库"></a>推送代码到远程仓库</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> push -f origin master</code></pre><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>看了上面操作，通俗讲就是</p><ul><li>建一个没有任何 commit log 的临时分支</li><li>然后删除老的 master 分支</li><li>再将临时分支更名为 master</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git commit </tag>
            
            <tag> git log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2020/03/14/Hexo/"/>
      <url>/2020/03/14/Hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/2020/03/14/java/HelloWorld/"/>
      <url>/2020/03/14/java/HelloWorld/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
